#!/usr/bin/env ruby

# sample/build-cross-ruby - build script for ruby using cross compiler
#
# Copyright (C) 2013 Tanaka Akira  <akr@fsij.org>
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#  1. Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above
#     copyright notice, this list of conditions and the following
#     disclaimer in the documentation and/or other materials provided
#     with the distribution.
#  3. The name of the author may not be used to endorse or promote
#     products derived from this software without specific prior
#     written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
# OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
# GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
# EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# build-crossruby requirements:
# * toolchain
#
# toolchain:
#   You need a toolchain for cross-compiling.
#
#   Toolchain building system:
#
#   - buildroot http://buildroot.uclibc.org/
#     tar xf buildroot-2013.02.tar.bz2
#     cd buildroot-2013.02
#     make menuconfig # Your favorite architecture, zlib, openssl, gdbm, libelf, libffi, ncurses, readline, libyaml
#     make
#     ln -s $PWD/output/host/usr/bin/<Target-Triplets>-* $HOME/bin
#
#   - NetBSD's build.sh
#     http://www.netbsd.org/docs/guide/en/chap-build.html
#     arch=sun3         # Your favorite architecture.
#     d=$HOME/netbsd
#     cd $d
#     wget ftp://ftp.netbsd.org/pub/NetBSD/NetBSD-6.1.2/source/sets/{gnusrc,sharesrc,src,syssrc}.tgz
#     tar xf gnusrc.tgz
#     tar xf sharesrc.tgz
#     tar xf src.tgz
#     tar xf syssrc.tgz
#     cd usr/src
#     ./build.sh -O $d/$arch -m $arch -U build > $d/build-$arch.log 2>&1
#     cross_gcc=`echo $d/$arch/tooldir.*/*-gcc`
#     triplet=`basename $cross_gcc -gcc`
#     cat <<End > $HOME/bin/$triplet-gcc
#     #!/bin/sh
#     $cross_gcc --sysroot=$d/$arch/destdir.$arch "\$@"
#     End
#     chmod 755 $HOME/bin/$triplet-gcc
#
#   OS package:
#
#   - Debian GNU/Linux (squeeze): gcc-mingw32
#     aptitude install gcc-mingw32
#
#   - Debian GNU/Linux (wheezy): gcc-mingw-w64
#     aptitude install gcc-mingw-w64
#
#   - Emdebian http://www.emdebian.org/ (squeeze)
#     aptitude install emdebian-archive-keyring
#     vi /etc/apt/sources.list # add "deb http://www.emdebian.org/debian squeeze main"
#     aptitude update
#     aptitude install gcc-4.4-arm-linux-gnueabi zlib1g-dev-armel-cross libgmp3-dev-armel-cross # arm-linux-gnueabi
#     aptitude install gcc-4.4-ia64-linux-gnu zlib1g-dev-ia64-cross libgmp3-dev-ia64-cross # ia64-linux-gnu
#     aptitude install gcc-4.4-mips-linux-gnu zlib1g-dev-mips-cross libgmp3-dev-mips-cross # mips-linux-gnu
#     aptitude install gcc-4.4-mipsel-linux-gnu zlib1g-dev-mipsel-cross libgmp3-dev-mipsel-cross # mipsel-linux-gnu
#     aptitude install gcc-4.4-powerpc-linux-gnu zlib1g-dev-powerpc-cross libgmp3-dev-powerpc-cross # powerpc-linux-gnu
#     aptitude install gcc-4.4-s390-linux-gnu zlib1g-dev-s390-cross libgmp3-dev-s390-cross # s390-linux-gnu
#     aptitude install gcc-4.4-sparc-linux-gnu zlib1g-dev-sparc-cross libgmp3-dev-sparc-cross # sparc-linux-gnu
#
#   Platform vendor's toolchain:
#
#   - Android NDK http://developer.android.com/tools/sdk/ndk/index.html
#     (The archive contains docs/STANDALONE-TOOLCHAIN.html.)
#     tar xf android-ndk-r8e-linux-x86_64.tar.bz2
#     cd android-ndk-r8e
#     build/tools/make-standalone-toolchain.sh \
#       --platform=android-14 \
#       --toolchain=arm-linux-androideabi-4.6 \
#       --system=linux-x86_64 \
#       --install-dir=$HOME/android-arm-toolchain
#     ln -s $HOME/android-arm-toolchain/bin/* $HOME/bin
#
#   Build yourself:
#
#   - Cygwin
#     Cygwin/X Contributor's Guide
#     Appendix A. Building a cross-compiler
#     http://x.cygwin.com/docs/cg/cross.html
#
#   A cross toolchain contains a cross compiler such as
#   i686-w64-mingw32-gcc (provided by gcc-mingw-w64).
#   The prefix, i686-w64-mingw32, is the target system.
#   You should be sure the command (and other commands which have same prefix)
#   is available in PATH.

require 'chkbuild'

ENV['LC_ALL'] = 'C'

# resource limits
#word_bytes = [nil].pack("p").length
#ChkBuild.limit(:cpu => 3600*4) # seconds
#ChkBuild.limit(:stack => 1024*1024*10*word_bytes) # bytes
#ChkBuild.limit(:data => 1024*1024*500*word_bytes) # bytes
#ChkBuild.limit(:as => 1024*1024*500*word_bytes) # bytes

# ChkBuild.nickname identify chkbuild installation.
# It is used for title of HTML, etc.
# The default is the hostname (without domain).
# ChkBuild.nickname = 'nickname'

# ChkBuild.top_uri is used for RSS.
# ChkBuild.top_uri = "file://#{ChkBuild.public_top}/"
# ChkBuild.top_uri = nil # use relative URL

module CrossRuby
  module CompleteOptions
  end
end

def (CrossRuby::CompleteOptions).call(target_opts)
  opts = target_opts.dup
  opts[:suffix_1] = opts[:target].gsub(/-/, '') if !opts.has_key?(:suffix_1)
  opts
end

def show_version_h(b)
  version_data = {
    'version.h' => %w[
      RUBY_BRANCH_NAME
      RUBY_PATCHLEVEL
      RUBY_RELEASE_CODE
      RUBY_RELEASE_DATE
      RUBY_RELEASE_DAY
      RUBY_RELEASE_MONTH
      RUBY_RELEASE_YEAR
      RUBY_VERSION
      RUBY_VERSION_CODE
      RUBY_VERSION_MAJOR
      RUBY_VERSION_MINOR
      RUBY_VERSION_TEENY
    ],
  }
  if version_data.keys.any? {|fn| File.exist? fn }
    b.logfile.start_section 'version.h'
    version_data.each {|fn, version_macros|
      if File.exist? fn
        File.foreach(fn) {|line|
          if /\A\#\s*define\s+([A-Z_]+)\s+(\S.*)\n\z/ =~ line &&
             version_macros.include?($1)
            puts line
          end
        }
      end
    }
  end
end

def show_verconf_h(b)
  verconf_list = [
    'verconf.h',
    'config.h',
    *Dir.glob(".ext/include/*/ruby/config.h")
  ]
  if verconf_list.any? {|fn| File.exist? fn }
    b.logfile.start_section 'verconf.h'
    verconf_list.each {|fn|
      if File.exist? fn
        File.foreach(fn) {|line|
          if /\A\#\s*define\s+([A-Z_]+)\s+(\S.*)\n\z/ =~ line &&
             $1 == 'RUBY_PLATFORM'
            puts line
          end
        }
      end
    }
  end
end

ChkBuild.define_title_hook(%w[nativeruby crossruby], %w[svn-info/ruby version.h verconf.h]) {|title, logs|
  log = logs.join('')
  lastrev = /^Last Changed Rev: (\d+)$/.match(log)
  version = /^#\s*define RUBY_VERSION "(\S+)"/.match(log)
  reldate = /^#\s*define RUBY_RELEASE_DATE "(\S+)"/.match(log)
  relyear = /^#\s*define RUBY_RELEASE_YEAR (\d+)/.match(log)
  relmonth = /^#\s*define RUBY_RELEASE_MONTH (\d+)/.match(log)
  relday = /^#\s*define RUBY_RELEASE_DAY (\d+)/.match(log)
  patchlev = /^#\s*define RUBY_PATCHLEVEL (\S+)/.match(log)
  platform = /^#\s*define RUBY_PLATFORM "(\S+)"/.match(log)
  if lastrev
    str = ''
    if lastrev
      str << "r#{lastrev[1]} "
    end
    str << 'ruby '
    if reldate
      reldate = reldate[1]
    elsif relyear && relmonth && relday
      reldate = "#{relyear[1]}-#{relmonth[1]}-#{relday[1]}"
    end
    if version && reldate
      str << version[1]
      str << (patchlev[1] == '-1' ? 'dev' : "p#{patchlev[1]}") if patchlev
      str << " (" << reldate << ")"
      str << " [" << platform[1] << "]" if platform
      ss = title.suffixed_name.split(/-/)[1..-1].reject {|s|
        /\A(trunk|1\.8)\z/ =~ s ||
        version[1] == s
      }
      str << " [#{ss.join(',')}]" if !ss.empty?
    end
    str.sub!(/ \z/, '')
    title.update_title(:version, str)
  end
}

ChkBuild.define_title_hook(%w[nativeruby crossruby], 'svn-info/ruby') {|title, log|
  lastrev = /^Last Changed Rev: (\d+)$/.match(log)
  if lastrev
    title.update_hidden_title(:ruby_rev, "r#{lastrev[1]}")
  end
}

def show_binaries(b)
  if Util.search_command('file')
    b.catch_error {
      binaries = Dir.glob(%w[ruby ruby.exe rubyw.exe .ext/**/*.so].join("\0"))
      binaries.sort!
      args = ["file", *binaries] + [{:section=>'ruby-file', :hide_commandline=>true}]
      b.run(*args)
    }
  end
end

def show_fake_rb(b)
  b.catch_error {
    filenames = Dir.glob('*-fake.rb')
    args = ['cat', *filenames]
    args << {:section=>'fake.rb'}
    b.run(*args)
  }
end

ChkBuild.define_build_proc('nativeruby') {|b|
  b.svn("http://svn.ruby-lang.org/repos/ruby", 'trunk', 'ruby')
  b.svn_info('ruby', :section=>"svn-info/ruby")
  Dir.chdir('ruby') {
    show_version_h(b)
    b.run('autoconf')
    configure_args = []
    configure_args << "--prefix=#{b.build_dir}"
    configure_args << "--disable-install-doc"
    b.run('./configure', *configure_args)
    show_verconf_h(b)
    b.make
    b.make('install')
  }
}

ChkBuild.define_build_proc('crossruby') {|b|
  target_system = b.opts[:target]
  nativeruby_build = b.depbuilds.find {|depbuild| depbuild.target.target_name == 'nativeruby' }
  baseruby = "#{nativeruby_build.dir}/bin/ruby"
  b.catch_error { b.run(baseruby, "-v", :section=>"baseruby-version") }
  branch = b.opts[:branch] || 'trunk'
  b.svn("http://svn.ruby-lang.org/repos/ruby", branch, 'ruby')
  b.svn_info('ruby', :section=>"svn-info/ruby")
  Dir.chdir('ruby') {
    show_version_h(b)
    b.run('autoconf')
    if File.exist? 'tool/config.guess'
      build_system = `tool/config.guess`.chomp
    else
      config_guess = "#{nativeruby_build.dir}/ruby/tool/config.guess"
      if File.exist? config_guess
        build_system = `#{config_guess}`.chomp
      end
    end
    configure_args = []
    configure_args << "--prefix=/usr"
    configure_args << "--build=#{build_system}" if build_system
    configure_args << "--host=#{target_system}"
    configure_args << "--with-baseruby=#{baseruby}"
    configure_args << "--disable-install-doc"
    b.run('./configure', *configure_args)
    show_verconf_h(b)
    b.make
    show_binaries(b)
    show_fake_rb(b)
    b.make('install', "DESTDIR=#{b.build_dir}")
  }
}

nativeruby = ChkBuild.def_target('nativeruby',
  :timeout => '1h',
  :output_interval_timeout => '5min')

crossruby_args = []

crossruby_args << [
  {:suffix_? => 'trunk', :branch => 'trunk' },
  #{:suffix_? => '2.0.0', :branch => 'branches/ruby_2_0_0' },
]

crossruby_args << [
  { :suffix_? => 'mingw', :target => 'i586-mingw32msvc' }, # Debian (squeeze) gcc-mingw32
  { :suffix_? => 'mingw32', :target => 'i686-w64-mingw32' }, # Debian (wheezy) gcc-mingw-w64
  { :suffix_? => 'mingw64', :target => 'x86_64-w64-mingw32' }, # Debian (wheezy) gcc-mingw-w64
  { :suffix_? => 'emdebian-arm', :target => 'arm-linux-gnueabi' }, # Emdebian (squeeze) gcc-4.4-arm-linux-gnueabi
  { :suffix_? => 'emdebian-ia64', :target => 'ia64-linux-gnu' }, # Emdebian (squeeze) gcc-4.4-ia64-linux-gnu
  { :suffix_? => 'emdebian-mips', :target => 'mips-linux-gnu' }, # Emdebian (squeeze) gcc-4.4-mips-linux-gnu
  { :suffix_? => 'emdebian-mipsel', :target => 'mipsel-linux-gnu' }, # Emdebian (squeeze) gcc-4.4-mipsel-linux-gnu
  { :suffix_? => 'emdebian-powerpc', :target => 'powerpc-linux-gnu' }, # Emdebian (squeeze) gcc-4.4-powerpc-linux-gnu
  { :suffix_? => 'emdebian-s390', :target => 's390-linux-gnu' }, # Emdebian (squeeze) gcc-4.4-s390-linux-gnu
  { :suffix_? => 'emdebian-sparc', :target => 'sparc-linux-gnu' }, # Emdebian (squeeze) gcc-4.4-sparc-linux-gnu
  { :suffix_? => 'aarch64', :target => 'aarch64-linux-gnu' }, # buildroot
  { :suffix_? => 'amd64', :target => 'x86_64-buildroot-linux-uclibc' }, # buildroot
  { :suffix_? => 'arm', :target => 'arm-buildroot-linux-uclibcgnueabi' }, # buildroot
  { :suffix_? => 'armeb', :target => 'armeb-buildroot-linux-uclibcgnueabi' }, # buildroot
  { :suffix_? => 'i386', :target => 'i586-buildroot-linux-uclibc' }, # buildroot
  { :suffix_? => 'mips', :target => 'mips-buildroot-linux-uclibc' }, # buildroot
  { :suffix_? => 'mipsel', :target => 'mipsel-buildroot-linux-uclibc' }, # buildroot
  { :suffix_? => 'powerpc', :target => 'powerpc-buildroot-linux-uclibc' }, # buildroot
  { :suffix_? => 'sh', :target => 'sh4-buildroot-linux-uclibc' }, # buildroot
  { :suffix_? => 'sparc', :target => 'sparc-buildroot-linux-uclibc' }, # buildroot
  { :suffix_? => 'xtensa', :target => 'xtensa-buildroot-linux-uclibc' }, # buildroot
  { :suffix_? => 'netbsd-alpha', :target => 'alpha--netbsd' }, # NetBSD
  { :suffix_? => 'netbsd-arm', :target => 'arm--netbsdelf' }, # NetBSD
  { :suffix_? => 'netbsd-hppa', :target => 'hppa--netbsd' }, # NetBSD
  { :suffix_? => 'netbsd-i486', :target => 'i486--netbsdelf' }, # NetBSD
  { :suffix_? => 'netbsd-m68010', :target => 'm68010--netbsdelf' }, # NetBSD
  { :suffix_? => 'netbsd-m68k', :target => 'm68k--netbsdelf' }, # NetBSD
  { :suffix_? => 'netbsd-mipseb', :target => 'mipseb--netbsd' }, # NetBSD
  { :suffix_? => 'netbsd-mipsel', :target => 'mipsel--netbsd' }, # NetBSD
  { :suffix_? => 'netbsd-powerpc', :target => 'powerpc--netbsd' }, # NetBSD
  { :suffix_? => 'netbsd-sh', :target => 'sh--netbsdelf' }, # NetBSD
  { :suffix_? => 'netbsd-shle', :target => 'shle--netbsdelf' }, # NetBSD
  { :suffix_? => 'netbsd-sparc', :target => 'sparc--netbsdelf' }, # NetBSD
  { :suffix_? => 'netbsd-sparc64', :target => 'sparc64--netbsd' }, # NetBSD
  { :suffix_? => 'netbsd-vax', :target => 'vax--netbsdelf' }, # NetBSD
  { :suffix_? => 'netbsd-x86_64', :target => 'x86_64--netbsd' }, # NetBSD
  { :suffix_? => 'android', :target => 'arm-linux-androideabi' }, # Android NDK
  { :suffix_? => 'x86android', :target => 'i686-linux-android' }, # Android NDK
  { :suffix_? => 'mipsandroid', :target => 'mipsel-linux-android' }, # Android NDK
  { :suffix_? => 'cygwin', :target => 'i686-pc-cygwin' }, # Cygwin
].reject {|h| !Util.search_command("#{h[:target]}-gcc") }

crossruby_args << {
  :timeout => '1h',
  :output_interval_timeout => '5min',
}

crossruby_args << nativeruby if nativeruby

ChkBuild.def_target('crossruby', *crossruby_args)

# dependencies:
# nativeruby 20130501T223400Z (ruby 2.1.0dev (2013-05-01) [x86_64-linux])
ChkBuild.define_diff_preprocess_gsub('crossruby',
  /^nativeruby .*/) {|match|
  'nativeruby <datetime> (<version>)'
}

# #define RUBY_PATCHLEVEL 180
ChkBuild.define_diff_preprocess_gsub(%w[nativeruby crossruby],
  /^\#define RUBY_PATCHLEVEL \d*/) {|match|
  '#define RUBY_PATCHLEVEL <patchlevel>'
}

# #define RUBY_RELEASE_DATE "2013-04-06"
ChkBuild.define_diff_preprocess_gsub(%w[nativeruby crossruby],
  /^\#define RUBY_RELEASE_DATE ".*"/) {|match|
  '#define RUBY_RELEASE_DATE "<year>-<mm>-<dd>"'
}

# #define RUBY_RELEASE_YEAR 2013
# #define RUBY_RELEASE_MONTH 4
# #define RUBY_RELEASE_DAY 6
ChkBuild.define_diff_preprocess_gsub(%w[nativeruby crossruby],
  /^\#define RUBY_RELEASE_(YEAR|MONTH|DAY) \d+/) {|match|
  "\#define RUBY_RELEASE_#{match[1]} <num>"
}

# ruby 1.9.2dev (2009-12-07 trunk 26037) [i686-linux]
# ruby 1.9.1p376 (2009-12-07 revision 26040) [i686-linux]
# | ruby 1.9.2dev (2010-02-18 trunk 26704) [x86_64-linux]
ChkBuild.define_diff_preprocess_gsub(%w[nativeruby crossruby],
  /ruby [0-9.a-z]+ \(.*\) \[.*\]$/) {|match|
  "ruby <version>"
}

# fake.rb:
#   RUBY_DESCRIPTION = "ruby #{RUBY_VERSION} (2013-05-01) [#{RUBY_PLATFORM}]"
ChkBuild.define_diff_preprocess_gsub('crossruby',
  /^( *RUBY_DESCRIPTION = )".*"$/) {|match|
  "#{match[1]}\"<description>\""
}

# done.  (0.07user 0.01system 0.05elapsed)
ChkBuild.define_diff_preprocess_gsub(%w[nativeruby crossruby],
  /^done\.  \(\d+\.\d\duser \d+\.\d\dsystem \d+\.\d\delapsed\)/) {|match|
  "done.  (X.XXuser X.XXsystem X.XXelapsed)"
}

ChkBuild.main
